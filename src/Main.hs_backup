{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-cse #-}

module Main where
import           Control.Monad
import           Crypto.Random
import           Data.List
import           System.Console.CmdArgs
import           System.Environment
import           System.Exit
import           System.Random

import qualified Data.Text              as DText
import qualified Data.Text.IO           as DText



-- main function
--
-- The function gets the arguments and creates then a easy to remember but secure password.

main = do
    -- get the arguments from create
    args <- cmdArgs create
    -- get the file with the words that should be used
    wordlist <- fmap DText.lines (DText.readFile (head (pullOut args)))
    --if a "seed" (optional argument) is given it is used to initialize the random number generator
    when (pullInt args /= 0) $ setStdGen (mkStdGen (pullInt args))
    -- get first random number to use as the seed for the random number generator in the function prePassword
    num <- randomIO :: IO Int
    -- creating of a random list of words
    let list = prePassword wordlist (mkStdGen num) (pullInteger args)
    -- generate password
    putStrLn (password (pullOut args !! 1) (pullOut args !! 2) list)



-- Datatype for cmdArgs

data EasyPasswordGenerator = EasyPasswordGenerator {arg1 :: String, arg2 :: String, arg3 :: String, seed :: Int, number :: Integer} deriving(Data, Show, Typeable)

create = EasyPasswordGenerator
    {arg1 = def &= typ "file" &= argPos 0 &= help "File of the words that should be used"
    ,arg2 = def &= typ "string1" &= argPos 1 &= help "First seperator of words"
    ,arg3 = def &= typ "string2" &= argPos 2 &= help "Second seperator of words"
    ,seed = 0 &= typ "seed" &= help "Seed for the random word chooser."
    ,number = 4 &= typ "number" &= help "Number of words used for the password"
    } &= help "A program to create passwords like in xkcd.com/936"
    &= program "easypassword"
    &= summary "easypassword v0.1"


-- auxiliary functions to get the arguments

pullOut :: EasyPasswordGenerator -> [String]
pullOut (EasyPasswordGenerator arg1 arg2 arg3 arg4 arg5) = [arg1, arg2, arg3]

pullInt :: EasyPasswordGenerator -> Int
pullInt (EasyPasswordGenerator arg1 arg2 arg3 arg4 arg5) = arg4

pullInteger :: EasyPasswordGenerator -> Integer
pullInteger (EasyPasswordGenerator arg1 arg2 arg3 arg4 arg5) = arg5


-- password creation function
--
-- str1 is Argument 1 and str2 is Argument 2. These get interlaced in between the
-- words from the list xs to create a secure and easy to remember password.

password :: String -> String -> [String] -> String
password str1 str2 [] = ""
password str1 str2 xs = head xs ++ str1 ++ password str2 str1 (tail xs)


-- random word collector
--
-- The randomness doesn't need to be cryptographic secure since we only use the randomness here to choose parts of our password.

prePassword :: RandomGen g => [DText.Text] -> g -> Integer -> [String]
prePassword xs _ 0 = []
prePassword xs g n = DText.unpack x : prePassword (delete x xs) gn (n-1)
    where x = xs !! head (randomRs (0, (length xs) - 1) g :: [Int])
          gn = mkStdGen ((randomRs (0, (length xs) - 1) g :: [Int]) !! i)
          i = head (randomRs (0, (length xs) - 1) g :: [Int])
